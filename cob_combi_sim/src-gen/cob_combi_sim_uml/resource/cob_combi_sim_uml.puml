@startuml

/'SUBSYSTEMS'/
component cob_gazebo {
  component gazebo {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_laserscan {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout cob_laserscan.base_laser_left_scan_raw as "base_laser_left/scan_raw" #blue
    portout cob_laserscan.base_laser_right_scan_raw as "base_laser_right/scan_raw" #blue
    portout cob_laserscan.base_laser_front_scan_raw as "base_laser_front/scan_raw" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_camera_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout cob_camera_controller.torso_left_cam_info as "torso_left_cam_info" #blue
    portout cob_camera_controller.torso_left_image_raw as "torso_left_image_raw" #blue
    portout cob_camera_controller.torso_left_image_raw_compressed as "torso_left_image_raw_compressed" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_tricycle_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin cob_tricycle_controller.tricycle_controller_cmd_vel_sub as "tricycle_controller/cmd_vel_sub" #blue
    portout cob_tricycle_controller.tf as "tf" #blue
    portout cob_tricycle_controller.odom_diff as "odom_diff" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_torso_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component robot_state_publisher {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin robot_state_publisher.joint_states_sub as "joint_states_sub" #blue
    portout robot_state_publisher.tf_rsp as "tf_rsp" #blue
    portout robot_state_publisher.tf_static_rsp as "tf_static_rsp" #blue
    portout robot_state_publisher.robot_description as "robot_description" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_joint_state {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout cob_joint_state.joint_states as "joint_states" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_light_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin cob_light_controller.set_Light_color as "set_Light_color" #orange

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_sound_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin cob_sound_controller.sound_play as "sound_play" #orange

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_mimic_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin cob_mimic_controller.set_Mimic as "set_Mimic" #orange

/' PORTS FROM THE ORIGINAL NODE '/
  }

 }
component cob_nav2 {
  component amcl {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component behavior_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component bt_navigator {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin bt_navigator.navigate_to_pose as "navigate_to_pose" #green

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component controller_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout controller_server.cmd_vel_nav as "cmd_vel_nav" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component global_costmap {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component lifecycle_manager_localization {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component lifecycle_manager_navigation {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component local_costmap {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component map_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component planner_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component smoother_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component velocity_smoother {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component waypoint_follower {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

 }

  component joy_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout joy_node.joy_pub as "joy_pub" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component teleop_twist_joy_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout teleop_twist_joy_node.cmd_vel as "cmd_vel" #blue
    portin teleop_twist_joy_node.joy as "joy" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component twist_mux {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin twist_mux.cmd_vel_sub as "cmd_vel_sub" #blue
    portout twist_mux.tricycle_controller_cmd_vel as "tricycle_controller/cmd_vel" #blue
    portin twist_mux.cmd_vel_navi_sub as "cmd_vel_navi_sub" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component ros2_laserscan_merger {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout ros2_laserscan_merger.cloud_in as "cloud_in" #blue
    portin ros2_laserscan_merger.base_laser_left_scan_raw_sub as "base_laser_left/scan_raw/sub" #blue
    portin ros2_laserscan_merger.base_laser_right_scan_raw_sub as "base_laser_right/scan_raw/sub" #blue
    portin ros2_laserscan_merger.base_laser_front_scan_raw_sub as "base_laser_front/scan_raw/sub" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component pointcloud_to_laserscan {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin pointcloud_to_laserscan.cloud_in_sub as "cloud_in_sub" #blue
    portout pointcloud_to_laserscan.scan as "scan" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component slam_toolbox {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin slam_toolbox.map_sub_slamtb as "map_sub_slamtb" #blue
    portin slam_toolbox.scan_sub as "scan_sub" #blue
    portout slam_toolbox.map as "map" #blue
    portout slam_toolbox.tf as "tf" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component rviz2 {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin rviz2.cloud_in_sub_rviz as "cloud_in_sub_rviz" #blue
    portin rviz2.map_sub as "map_sub" #blue
    portin rviz2.robot_description_sub as "robot_description_sub" #blue
    portin rviz2.tf_rviz_sub as "tf_rviz_sub" #blue
    portin rviz2.inference_result_sub as "inference_result_sub" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component yolov8_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout yolov8_node.Yolov8_Inference as "Yolov8_Inference" #blue
    portout yolov8_node.inference_result as "inference_result" #blue
    portin yolov8_node.image_raw as "image_raw" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component bt_lifecycle_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin bt_lifecycle_node.Yolov8_Inference_sub as "Yolov8_Inference_sub" #blue
    portout bt_lifecycle_node.sound_play_sc as "sound_play_sc" #orange
    portout bt_lifecycle_node.setLight as "setLight" #orange
    portout bt_lifecycle_node.setMimic as "setMimic" #orange
    portin bt_lifecycle_node.change_state as "change_state" #orange
    portout bt_lifecycle_node.navigate_goal as "navigate_goal" #green

/' PORTS FROM THE ORIGINAL NODE '/
  }

  joy_node.joy_pub --> teleop_twist_joy_node.joy
  teleop_twist_joy_node.cmd_vel --> twist_mux.cmd_vel_sub
  controller_server.cmd_vel_nav --> twist_mux.cmd_vel_navi_sub
  ros2_laserscan_merger.cloud_in --> pointcloud_to_laserscan.cloud_in_sub
  ros2_laserscan_merger.cloud_in --> rviz2.cloud_in_sub_rviz
  twist_mux.tricycle_controller_cmd_vel --> cob_tricycle_controller.tricycle_controller_cmd_vel_sub
  cob_laserscan.base_laser_left_scan_raw --> ros2_laserscan_merger.base_laser_left_scan_raw_sub
  cob_laserscan.base_laser_right_scan_raw --> ros2_laserscan_merger.base_laser_right_scan_raw_sub
  cob_laserscan.base_laser_front_scan_raw --> ros2_laserscan_merger.base_laser_front_scan_raw_sub
  robot_state_publisher.robot_description --> rviz2.robot_description_sub
  pointcloud_to_laserscan.scan --> slam_toolbox.scan_sub
  slam_toolbox.map --> rviz2.map_sub
  slam_toolbox.map --> slam_toolbox.map_sub_slamtb
  cob_joint_state.joint_states --> robot_state_publisher.joint_states_sub
  cob_camera_controller.torso_left_image_raw --> yolov8_node.image_raw
  robot_state_publisher.tf_rsp --> rviz2.tf_rviz_sub
  cob_light_controller.set_Light_color --> bt_lifecycle_node.setLight
  cob_sound_controller.sound_play --> bt_lifecycle_node.sound_play_sc
  cob_mimic_controller.set_Mimic --> bt_lifecycle_node.setMimic
  bt_navigator.navigate_to_pose --> bt_lifecycle_node.navigate_goal
  yolov8_node.Yolov8_Inference --> bt_lifecycle_node.Yolov8_Inference_sub
  yolov8_node.inference_result --> rviz2.inference_result_sub

@enduml